import cv2 as cv
import numpy as np

#works well
# img = cv.imread('shapesbw.png')
# imgray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
# ret, thresh = cv.threshold(imgray, 200, 255, 0)
# contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

# cv.drawContours(img, contours, -1, (0,0,255), 5, cv.LINE_8)
# cv.imwrite("contours.png", img)

imagem = cv.imread("shapeswdraw.png", cv.IMREAD_COLOR)
img = imagem.copy()
imgray = cv.cvtColor(imagem, cv.COLOR_BGR2GRAY)
_, threshold = cv.threshold(imgray, 200, 255, cv.THRESH_BINARY)

# invert the image
threshold = cv.bitwise_not(threshold)
contours, _ = cv.findContours(threshold, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)

for cnt in contours:
    approx = cv.approxPolyDP(cnt,0.01*cv.arcLength(cnt,True),True)
    print("length: ",len(approx))
    if len(approx)==5:
        # print("pentagon")
        cv.drawContours(img,[cnt],0,(0,0,0),-1)
    elif len(approx)==3:
        # print("triangle")
        cv.drawContours(img,[cnt],0,(0,255,0),-1)
    elif len(approx)==4:
        # print("square")
        cv.drawContours(img,[cnt],0,(255, 255,0),-1)
    elif len(approx) == 9:
        # print("half-circle")
        cv.drawContours(img,[cnt],0,(255,0,255),-1)
    elif len(approx) > 15:
        print("circle: length: ", len(approx))
        cv.drawContours(img,[cnt],0,(255,0,255),-1)
    elif len(approx) > 6 and len(approx) < 15:
        print("ellipse: length: ", len(approx))
        cv.drawContours(img,[cnt],0,(0,255,255),-1)

# for i in range(len(contours)):
#   print("Contour",i,(0,0,255))
#   cv.drawContours(img, contours, i, (0,0,255), 10)
cv.drawContours(img, contours, -1, (0,0,255), 5, cv.LINE_8)

cv.imwrite("shapesdetected.png", img)
print("Contour image type", img.dtype)

