import cv2 as cv
import numpy as np

#works well
# img = cv.imread('shapesbw.png')
# imgray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
# ret, thresh = cv.threshold(imgray, 200, 255, 0)
# contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

# cv.drawContours(img, contours, -1, (0,0,255), 5, cv.LINE_8)
# cv.imwrite("contours.png", img)

imagem = cv.imread("shapes.png", cv.IMREAD_COLOR)
img = imagem.copy()
imgray = cv.cvtColor(imagem, cv.COLOR_BGR2GRAY)
_, threshold = cv.threshold(imgray, 200, 255, cv.THRESH_BINARY)

# invert the image
threshold = cv.bitwise_not(threshold)
cv.imwrite("shapesthresh.png", threshold)

#cannyout = cv.Canny(threshold, 100, 100 * 2)

contours, _ = cv.findContours(threshold, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)

# for i in range(len(contours)):
#   print("Contour",i,(0,0,255))
#   cv.drawContours(img, contours, i, (0,0,255), 10)
cv.drawContours(img, contours, -1, (0,0,255), 5, cv.LINE_8)


cv.imwrite("shapescannycontour.png", img)
print("Contour image type", img.dtype)

# for i in range(len(contours)):
#     color = (rng.randint(0,256), rng.randint(0,256), rng.randint(0,256))
#         cv.drawContours(drawing, contours, i, color, 2, cv.LINE_8, hierarchy, 0)

# for cnt in contours:
#   cv.drawContours(img, [cnt], 0, (1,0,1,1), 2, cv.LINE_8)

# cv.imwrite("shapescontour.png", img)
# cv.imwrite("cannyout.png", cannyout)

# cannycontours, _ = cv.findContours(cannyout, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)

# color = (1,0,1)
# for i in range(len(cannycontours)):
#   print("Contour",i,color)
#   cv.drawContours(cannyout, cannycontours, i, color, 5, cv.LINE_8)

# cv.imwrite("cannyoutcontours.png", cannyout)
